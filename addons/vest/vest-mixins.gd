extends Object
class_name VestMixins

static func get_mixins() -> Array[String]:
	return (VestTest.new()).__vest_mixins

static func add_mixin(mixin: Script):
	pass

static func remove_mixin(mixin: Script):
	pass

static func _generate_mixin_chain(mixins: Array[String]):
	# Generate mixin chain
	var mixin_chain: Array[Script] = []
	mixin_chain.append(_VestTestBase)
	mixin_chain.append_array(_get_builtin_mixins())

	var active_mixins: Array[Script] = []

	for mixin_path in mixins:
		if not ResourceLoader.exists(mixin_path, "Script"):
			# Script doesn't exist
			continue

		var mixin_script := load(mixin_path) as Script
		if not mixin_script:
			# Not script?
			continue

		if mixin_chain.has(mixin_script):
			# Don't include the same mixin twice
			continue

		mixin_chain.append(mixin_script)
		active_mixins.append(mixin_script)

	mixin_chain.append(VestTest)

	# Generate chain
	_clean_mixin_directory()
	DirAccess.make_dir_recursive_absolute(_get_mixin_directory())
	var extends_pattern := RegEx.create_from_string("^extends.*")

	for i in range(1, mixin_chain.size()):
		var parent_script := mixin_chain[i - 1]
		var target_script := mixin_chain[i]

		var parent_path := parent_script.resource_path
		var target_path := target_script.resource_path

		if i != 1:
			parent_path = _get_generated_mixin_path(parent_script, i - 1)
		if i != mixin_chain.size() - 1:
			target_path = _get_generated_mixin_path(target_script, i)

		# Generate source
		var target_source := target_script.source_code
		var script_header := (
			"# This file is generated by Vest!\n" +
			"# Do not modify!\n" +
			"extends \"%s\"\n\n" % [parent_path])

		target_source = extends_pattern.sub(target_source, "", true)
		if target_script != VestTest:
			target_source = script_header + target_source
		else:
			target_source = script_header
			target_source += "class_name VestTest\n\n"

			var mixin_fragments = active_mixins\
				.map(func(it): return it.resource_path)\
				.map(func(it): return "preload(\"%s\")" % it)

			mixin_fragments = ", ".join(mixin_fragments)
			target_source += "var __vest_mixins := [%s]" % [mixin_fragments]

		var target_file := FileAccess.open(target_path, FileAccess.WRITE)
		target_file.store_string(target_source)
		target_file.close()

static func _get_generated_mixin_name(script: Script, idx: int) -> String:
	return "%d-%x.gd" % [idx, hash(script)]

static func _get_generated_mixin_path(script: Script, idx: int) -> String:
	return _get_mixin_directory() + _get_generated_mixin_name(script, idx)

static func _get_builtin_mixins() -> Array[Script]:
	return [
		preload("res://addons/vest/test/mixins/gather-suite-mixin.gd"),
		preload("res://addons/vest/test/mixins/assert-mixin.gd"),
		preload("res://addons/vest/test/mixins/mock-mixin.gd")
	]

static func _get_mixin_directory() -> String:
	return "res://addons/vest/_generated-mixins/"

static func _clean_mixin_directory():
	for file in DirAccess.get_files_at(_get_mixin_directory()):
		DirAccess.remove_absolute(_get_mixin_directory() + file)
